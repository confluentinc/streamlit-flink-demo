import sys


# Simple class extending list that encapsulates a table generated from a
# changelog. Tables support incremental updates so that callers don't have
# to consume an entire changelog each time they want to update a table.
#
# The pattern is to use the set of new changelog records returned by consume(),
# and then pass those to update(), like so:
#
#   log = Changelog(schema, rows)
#   log.consume(n)
#   table = log.collapse()
#
#   new = log.consume(n)
#   table.update(new)
#
# At this point the table will be equivalent to a table generated by scanning all
# 2 * n records in the changelog, but will not have performed any extraneous scans
# in order to reflect the new changelog records.
class Table(list):

    def __init__(self, columns):
        super().__init__()
        self.columns = columns

    def update(self, rows):
        def remove(r):
            if r not in self:
                print('no corresponding row in table to remove: %s', r)
                return
            self.remove(r)

        handlers = {
            '+I': self.append,
            '-U': remove,
            '+U': self.append,
            '-D': remove,
            None: self.append
        }
        for row in rows:
            op, row = row[0], row[1:]
            # Changelog should have already validated that these changelog records
            # contain valid op codes
            handlers[op](row)


# Lightweight wrapper around result sets returned by the API. Encapsulates
# things that are useful when dealing with result sets, such as statement
# start time (latency), schema, rows, and functionality for interpreting its
# underlying changelog.

class Changelog(object):

    def __init__(self, schema, rows, statement=None, ts=None, properties=None):
        self.rows = rows
        self.statement = statement or {}
        self.properties = properties or {}
        self.ts = ts
        self.history = []
        self.internal_schema = schema
        self.columns = [c['name'] for c in self.internal_schema['columns']]
        self.columns.insert(0, 'op')
        self.ops_received = set()

    def collapse(self):
        columns = [c['name'] for c in self.internal_schema['columns']]
        result = Table(columns)
        result.update(self.history)
        return result

    def validate(self, data):
        op_labels = {
            0: '+I',
            1: '-U',
            2: '+U',
            3: '-D'
        }
        op = data.get('op')
        row = list(data['row'])
        # Note that we're validating incoming rows against the schema this
        # changelog was built from, not the set of columns in this changelog's
        # output (self.columns)
        if len(row) != len(self.internal_schema['columns']):
            args = (
                len(self.internal_schema['columns']),
                len(row),
                row
            )
            raise ValueError('table has %d columns but row has %d: %s' % args)
        if op is not None and op not in op_labels:
            raise ValueError('invalid op code received for row: %s' % data)

        # From this point forth, work with slightly more human friendly op codes
        if op is not None:
            op = op_labels[op]

        # Also note that we'll be working with flattened changelog rows now,
        # in which the op code is just the first column in each row
        return op, tuple([op] + list(row))

    async def consume(self, limit=None, copy=False):
        limit = limit if limit is not None else sys.maxsize
        # Changelogs always wrap rows in a generator, which make this easy.
        # Each call to consume will pick up where the last one left off in
        # the generator, so no need to keep our own cursor.
        start = len(self.history)
        consumed = 0

        async for data in self.rows:
            try:
                op, row = self.validate(data)
                self.history.append(row)
                if op:
                    self.ops_received.add(op)
                consumed += 1
                if consumed >= limit:
                    break
            except StopIteration:
                break

        # Return the newly added changelog rows in the form of a slice
        # to avoid extraneous memory consumption, unless caller wants
        # a copy (generally for thread safety)
        result = self.history[start:]
        if copy:
            result = list(result)
        return result


